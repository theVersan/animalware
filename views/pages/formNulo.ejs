<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>FormUser</title>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet" />
    <link href="../../assets/styles/pages/forms.css" rel="stylesheet" />
</head>

<body style="background-color: #79955D; overflow: hidden;">
    <div>
        <img src="https://i.ibb.co/LYGKHwh/2c436b16-b779-4a4d-83ab-da010a188a10.png" class="logoDesk">
        <img src="https://i.ibb.co/cb9MGVR/PATAAAA.png" class="background-image">
        <img src="https://i.ibb.co/cb9MGVR/PATAAAA.png" class="background-image-2">
    </div>
    <div id="elementosCentro" class="elementosCentro">
        <div id="formContainer" class="space-y-4"></div>
        <div id="explanationContainer" class="textoAjuda"><!-- Aqui serão exibidas as explicações --></div>
        <div class="progress-container">
            <div class="progress-bar"></div>
        </div>
        <div class="buttons">
            <button class="cta" id="prevBtn">
                <svg width="15px" height="10px" viewBox="0 0 13 10">
                    <path d="M12,5 L2,5"></path>
                    <polyline points="5 1 1 5 5 9"></polyline>
                </svg>
                <span>Anterior</span>
            </button>
            <button class="cta" id="nextBtn">
                <span>Próximo</span>
                <svg width="15px" height="10px" viewBox="0 0 13 10">
                    <path d="M1,5 L11,5"></path>
                    <polyline points="8 1 12 5 8 9"></polyline>
                </svg>
            </button>
        </div>
    </div>
    <button class="button24">
        <svg fill="#000000" version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="24px" height="24px" viewBox="0 0 973.1 973.1" xml:space="preserve">
            <g>
                <path d="M502.29,788.199h-47c-33.1,0-60,26.9-60,60v64.9c0,33.1,26.9,60,60,60h47c33.101,0,60-26.9,60-60v-64.9 C562.29,815,535.391,788.199,502.29,788.199z"/>
                <path d="M170.89,285.8l86.7,10.8c27.5,3.4,53.6-12.4,63.5-38.3c12.5-32.7,29.9-58.5,52.2-77.3c31.601-26.6,70.9-40,117.9-40 c48.7,0,87.5,12.8,116.3,38.3c28.8,25.6,43.1,56.2,43.1,92.1c0,25.8-8.1,49.4-24.3,70.8c-10.5,13.6-42.8,42.2-96.7,85.9 c-54,43.7-89.899,83.099-107.899,118.099c-18.4,35.801-24.8,75.5-26.4,115.301c-1.399,34.1,25.8,62.5,60,62.5h49 c31.2,0,57-23.9,59.8-54.9c2-22.299,5.7-39.199,11.301-50.699c9.399-19.701,33.699-45.701,72.699-78.1 C723.59,477.8,772.79,428.4,795.891,392c23-36.3,34.6-74.8,34.6-115.5c0-73.5-31.3-138-94-193.4c-62.6-55.4-147-83.1-253-83.1 c-100.8,0-182.1,27.3-244.1,82c-52.8,46.6-84.9,101.8-96.2,165.5C139.69,266.1,152.39,283.5,170.89,285.8z"/>
            </g>
        </svg>
    </button>

    <div class="main" style="display: none;">
        <div class="up">
            <button class="card1">
                <svg height="15px" width="15px" version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
                    viewBox="0 0 206.505 206.505" xml:space="preserve">
                    <g>
                        <path style="fill:#010002;"
                            d="M167.069,16.354c-0.426,0.186-43.29,18.671-70.274-4.481c-31.021-26.619-60.722-0.2-61.012,0.072
                        L34.623,13l-0.179,193.494l7.108,0.011l0.115-122.594c5.157-4.091,27.11-19.086,50.498,0.988
                        c30.356,26.047,75.839,6.438,77.765,5.59l2.133-0.938V14.153L167.069,16.354z M164.943,84.824
                        c-8.997,3.389-44.603,14.874-68.148-5.322c-10.375-8.904-20.6-11.871-29.629-11.871c-10.815,0-19.923,4.266-25.489,7.702
                        l0.047-59.101c5.264-4.169,27.142-18.961,50.44,1.034c24.855,21.323,59.863,12.043,72.78,7.516V84.824z" />
                    </g>
                </svg>
              <h6>Relatar um problema</h6>
            </button>
            <button class="card2">
                <svg version="1.0" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1280.000000 640.000000" padding
                    width="5vh" height="5vh" preserveAspectRatio="xMidYMid meet">
                    <g transform="translate(0.000000,640.000000) scale(0.100000,-0.100000)" fill="#000000"
                        stroke="none">
                        <path
                            d="M9960 5774 c-25 -2 -106 -8 -180 -14 -352 -29 -767 -103 -1450 -260 -1060 -244 -1395 -295 -1930 -295 -479 1 -669 31 -1475 235 -214 54 -436 108 -492 119 -263 54 -939 156 -1248 188 -243 25 -811 25 -1015 0 -341 -42 -640 -103 -1270 -259 -223 -55 -512 -124 -643 -153 -131 -29 -241 -55 -243 -58 -3 -3 -6 -148 -7 -323 -3 -496 1 -509 270 -860 109 -142 177 -257 207 -348 9 -27 30 -112 46 -188 126 -588 305 -1192 521 -1756 107 -279 199 -425 374 -590 274 -259 730 -464 1205 -541 216 -35 365 -44 628 -38 626 15 1009 129 1390 414 103 77 304 273 396 387 222 274 434 635 621 1058 109 248 133 321 225 713 70 294 120 456 175 565 55 109 72 130 133 158 55 25 58 25 236 19 255 -10 249 -8 328 -87 55 -55 76 -86 126 -190 64 -132 91 -214 167 -505 168 -638 406 -1174 696 -1570 98 -133 357 -391 479 -477 705 -497 1693 -616 2488 -299 614 245 1043 709 1267 1371 70 206 113 374 210 811 137 620 197 833 276 993 63 126 107 180 239 285 79 64 98 151 81 386 -7 96 -6 177 1 258 18 197 -10 286 -109 339 -32 18 -102 38 -194 58 -151 31 -269 64 -599 169 -271 86 -425 122 -800 186 -480 81 -601 95 -860 99 -124 2 -245 2 -270 0z m-6185 -435 c226 -20 496 -78 761 -163 566 -183 884 -419 1017 -756 49 -125 67 -234 68 -415 0 -213 -36 -428 -121 -720 -73 -249 -249 -708 -360 -942 -310 -651 -793 -1072 -1414 -1234 -415 -108 -913 -94 -1386 38 -449 125 -790 448 -985 933 -88 219 -217 707 -284 1075 -95 519 -117 1069 -53 1310 113 422 450 655 1122 774 129 23 523 74 705 91 315 30 658 33 930 9z m6215 -5 c215 -18 455 -47 662 -79 586 -91 924 -250 1103 -519 116 -176 145 -292 152 -621 11 -492 -62 -987 -243 -1645 -69 -255 -102 -347 -178 -505 -103 -214 -208 -360 -359 -500 -177 -165 -375 -269 -637 -335 -783 -196 -1489 -85 -2033 321 -339 253 -597 614 -807 1130 -277 680 -390 1119 -377 1469 3 74 12 171 22 215 91 438 472 744 1173 944 327 93 515 125 867 145 110 6 478 -5 655 -20z" />
                    </g>
                </svg>
                <h6>Modo Míope</h6>
            </button>


        </div>
    </div>

    <script>
        const formContainer = document.getElementById('formContainer');
        const nextBtn = document.getElementById('nextBtn');
        const prevBtn = document.getElementById('prevBtn');
        const progressBar = document.querySelector('.progress-bar');
        const explanationContainer = document.getElementById('explanationContainer');

        const questions = [
    { id: 'idUser', label: 'ID do Usuário', type: 'number', placeholder: 'ID do Usuário', required: true, inputClass: 'custom-input-2', explanation: 'Informe o ID do usuário.'  },
    { id: 'why_dont_want', label: 'Por que você não deseja conviver com cães?', type: 'text', placeholder: 'descreva aqui.',  inputClass: 'custom-input-2', explanation: 'Explique as razões pelas quais você não deseja conviver com cães.' },
];

        let currentQuestionIndex = 0;
        const responses = {};

        function showQuestion(index) {
            const question = questions[index];
            formContainer.innerHTML = '';

            if (question.type === 'select') {
                const selectElement = document.createElement('select');
                selectElement.id = question.id;
                selectElement.className = question.inputClass;

                question.options.forEach(option => {
                    const optionElement = document.createElement('option');
                    optionElement.value = option.value;
                    optionElement.textContent = option.label;
                    selectElement.appendChild(optionElement);
                });

                formContainer.innerHTML = `
                    <div class="${question.layout || ''}">
                        <label for="${question.id}" style="${question.style || ''}" class="custom-label">${question.label}</label>
                    </div>
                `;
                formContainer.appendChild(selectElement);
            } else {
                formContainer.innerHTML = `
                    <div class="${question.layout || ''}">
                        <label for="${question.id}" style="${question.style || ''}" class="custom-label">${question.label}</label>
                        <input id="${question.id}" type="${question.type}" placeholder="${question.placeholder}" class="${question.inputClass}">
                    </div>
                `;
            }

            if (responses[question.id]) {
                document.getElementById(question.id).value = responses[question.id];
            }

            showExplanation(index);
            prevBtn.style.display = index === 0 ? 'none' : 'inline-block';
            nextBtn.innerHTML = index === questions.length - 1 ? 'Enviar' : `
                <span>Próximo</span>
                <svg width="15px" height="10px" viewBox="0 0 13 10">
                    <path d="M1,5 L11,5"></path>
                    <polyline points="8 1 12 5 8 9"></polyline>
                </svg>
            `;
        }

        function showExplanation(index) {
            explanationContainer.innerHTML = '';
            const explanation = questions[index].explanation;
            const explanationElement = document.createElement('div');
            explanationElement.innerHTML = `
            <div class="question-explanation">
            <img class="question-explanation-icon" src="https://cdn-icons-png.freepik.com/128/3409/3409564.png?" alt="Descrição da imagem">
            <span>${explanation}</span>
    </a>
</div>
            `;
            explanationContainer.appendChild(explanationElement);
        }

        // Chamada da função para mostrar a explicação da primeira pergunta
        showExplanation(currentQuestionIndex);

        function updateProgressBar(index) {
            const progressPercentage = ((index + 1) / questions.length) * 100;
            progressBar.style.width = `${progressPercentage}%`;
        }

        nextBtn.addEventListener('click', () => {
            const currentQuestion = questions[currentQuestionIndex];
            const input = document.getElementById(currentQuestion.id);
            const value = input.value.trim();

            if (!value) {
                alert('Por favor, preencha este campo.');
                return;
            }

            responses[currentQuestion.id] = value;

            if (currentQuestionIndex < questions.length - 1) {
                currentQuestionIndex++;
                showQuestion(currentQuestionIndex);
                updateProgressBar(currentQuestionIndex);
            } else {
                console.log('Enviando dados:', responses);

                fetch('/DontLivedAndDontWant/create', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(responses)
                }).then(response => {
                    if (!response.ok) {
                        return response.json().then(err => {
                            throw new Error(`Error: ${err.error}`);
                        });
                    }
                    return response.json();
                }).then(data => {
                    console.log(data);
                    alert('Formulário enviado com sucesso!');
                }).catch((error) => {
                    console.error('Error:', error);
                });
            }
        });
        // Função para aumentar o tamanho do texto
        function aumentarTexto() {
            const elementosComTexto = document.querySelectorAll('.custom-label, .custom-input-2, .gender-select');

            elementosComTexto.forEach(elemento => {
                // Verifica se o elemento já tem uma classe "texto-maior", se não tiver, adiciona.
                if (!elemento.classList.contains('texto-maior')) {
                    elemento.classList.add('texto-maior');
                }
            });
        }

        // Adiciona o evento de clique ao botão
        document.querySelector('.card2').addEventListener('click', aumentarTexto);

        prevBtn.addEventListener('click', () => {
            if (currentQuestionIndex > 0) {
                currentQuestionIndex--;
                showQuestion(currentQuestionIndex);
                updateProgressBar(currentQuestionIndex);
            }
        });

        const button24 = document.querySelector('.button24');
        const cards = document.querySelectorAll('.main');

        let cardsVisible = false;

        button24.addEventListener('click', () => {
            if (cardsVisible) {
                cards.forEach(card => {
                    card.style.display = 'none';
                });
                cardsVisible = false;
            } else {
                cards.forEach(card => {
                    card.style.display = 'block';
                });
                cardsVisible = true;
            }
        });

        showQuestion(currentQuestionIndex);
        updateProgressBar(currentQuestionIndex);
    </script>
</body>

</html>